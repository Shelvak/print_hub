@Print =
  articles: {},

  assignDefaultOrGetArticle: (article)->
    Print.articles[article.id] ||= {}
    articleData = Print.articles[article.id]
    _.defaults(
      articleData,
      {
        price: 0.0,
        units: 0,
        unitPrice: 0.0
      }
    )
    articleData

  updateArticlesCount: ->
    articleCount = $('.article_line:not(.exclude-from-total)').length
    title = $('a[href="#articles_container"]')[0]
    badge = title.querySelector('.badge')

    if articleCount == 0
      if badge
        badge.remove()
      return

    if !badge
      count = '&nbsp;<span class="badge badge-info"></span>'
      title.innerHTML += count
      badge = title.querySelector('.badge')

    badge.innerHTML = articleCount

    Print.updateTotalPrice()

  updateStock: (printJob)->
    jobStorage = Jobs.assignDefaultOrGetJob(printJob)
    copies = jobStorage.copies || 0
    stock = jobStorage.stock || 0

    if stock > 0
      printedCopies = if stock > copies then 0 else copies - stock
      printJob.querySelector('.document_stock').innerHTML = '#' + stock + '!' + printedCopies

  updateTotalPrice: ->
    freeCredit = parseFloat($('#customer_free_credit').val()) || 0.0
    [payWithCash, payWithBonus, totalPrice] = [0.0, 0.0, 0.0]

    if !$('#print_pay_later').is(':checked')
      _.each Jobs.getPrintableJobs(), (printJob)->
        job = Jobs.assignDefaultOrGetJob(printJob)
        totalPrice += if job then job.price else 0.0

      _.each $('.article_line:not(.exclude-from-total)'), (articleLine) ->
        article = Print.assignDefaultOrGetArticle(articleLine)
        totalPrice += if article then article.price else 0.0

      if freeCredit > totalPrice
        payWithCash = 0.0
        payWithBonus = totalPrice
      else
        payWithCash = totalPrice - freeCredit
        payWithBonus = freeCredit

    $(Print.cashPrefix + '_amount').val(payWithCash.toFixed(3))
    $(Print.cashPrefix + '_paid').val(payWithCash.toFixed(3))
    $(Print.creditPrefix + '_amount').val(payWithBonus.toFixed(3))
    $(Print.creditPrefix + '_paid').val(payWithBonus.toFixed(3))

  updateArticleLinePrice: (articleLine)->
    units = parseInt(articleLine.querySelector('input[name$="[units]"]').value, 10)
    unitPrice = parseFloat(
      articleLine.querySelector('input[name$="[unit_price]"]').value
    )
    articlePrice = (units * unitPrice) || 0.0
    articleStorage = Print.assignDefaultOrGetArticle(articleLine)

    _.extend(
      articleStorage,
      {
        price: articlePrice,
        units: units,
        unitPrice: unitPrice
      }
    )

    money = articleLine.querySelector('span.money')
    money.innerHTML = Util.replaceWithRegEx(
      money.innerHTML.trim(), /(\d+.)+\d+/, articlePrice.toFixed(3)
    )

    Print.updateTotalPrice()

  clearCustomer: ->
    $('#print_auto_customer_name').val('')
    $('#print_customer_id').val('')
    $('#customer_free_credit').val('')
    $('#link_to_customer_credit_detail').hide()
    $('#print_pay_later').attr('checked', false).parents('div.field').hide()

    Print.updateTotalPrice()

  excludeElementFromTotal: (element) ->
    element.classList.add('exclude-from-total')


new Rule
  condition: -> $('form.new_print').length
  load: ->
   # Elimina con efecto y recalcula
   @map.removeItem ||= (event, element)->
     if $(element).hasClass('print_job')
       Print.excludeElementFromTotal(element)

     else if $(element).hasClass('article_line')
       Print.excludeElementFromTotal(element)
       Print.updateArticlesCount()

     Jobs.reCalcEverything()
     Print.updateTotalPrice()

   # Después del autocomplete, completa con todos los datos
   @map.pagesAndPriceAfterAutocomplete ||= ->
     item = $(this).data('item')

     if item.pages
       pages = item.pages
       stock = parseInt(item.stock)
       printJob = $(this).parents('.print_job:first')[0]
       printJobDetailsLink = printJob.querySelector('a.details-link')
       printJobStockDetails = printJob.querySelector('.document_stock')

       jobStorage = Jobs.assignDefaultOrGetJob(printJob)
       jobStorage.rangePages = pages

       pagesInput = printJob.querySelector('input[name$="[pages]"]')
       pagesInput.value = pages
       pagesInput.disabled = true

       Util.replaceOwnAttrWithRegEx(printJobDetailsLink, 'href', /\d+$/, item.id)
       Helper.show(printJobDetailsLink)
       #printJob.querySelector('.dynamic_details').innerHTML = ''

       if item.print_job_type
         printJob.querySelector('.js-print_job_type-selector').value = item.print_job_type

       if stock > 0
         jobStorage.stock = stock
         Helper.show(printJobStockDetails)
         Print.updateStock(printJob)
       else
         Helper.hide(printJobStockDetails)

       Jobs.reCalcPages(printJob)
     else if item.unit_price
       unitPrice = parseFloat(item.unit_price).toFixed(3)
       articleLine = $(this).parents('.article_line:first')

       articleLine.find('input[name$="[unit_price]"]').val(unitPrice)

       Print.updateArticleLinePrice(articleLine[0])
     else if item.free_credit
       customerDetailsLink = $('#link_to_customer_credit_detail')

       $('#customer_free_credit').val(item.free_credit)
       $('#print_pay_later').parents('div.field').show()

       customerDetailsLink.attr(
         'href', customerDetailsLink.attr('href').replace(/\d+/, item.id)
       ).show()

     Jobs.reCalcEverything()
     Print.updateTotalPrice()

   # Si el cliente es 'confiable' autoselecciona Cuenta corriente
   @map.autoSelectCustomerKind ||= ->
     element = $(this).data('item')
     checked = element.kind == '<%= Customer::KINDS[:reliable] %>'

     $('#print_pay_later').attr('checked', checked)

   # Elimina el cliente del trabajo de impresión
   @map.removeCustomer ||= ->
     Print.clearCustomer() if /^\s*$/.test($(this).val())

   # Limpia el documento en caso de cambiar el _autocomplete_
   @map.resetPrintJobElements ||= ->
     element = $(this)
     printJob = element.parents('.print_job')

     if printJob.length > 0 && /^\s*$/.test(element.val())
       printJob.find('input[name$="[range]"]').data('rangePages', 0)
       printJob.find('input[name$="[pages]"]').val('').removeAttr('disabled')
       printJob.find('.dynamic_details').html('')
       printJob.find('a.details-link').hide()
       printJob.find('.document_stock').hide()

       Jobs.reCalcPages(printJob)

   # Limpia articulo en caso de cambiar el _autocomplete_
   @map.resetArticlesElements ||= ->
     element = $(this)
     articleLine = element.parents('.article_line:first')

     if articleLine.length > 0 && /^\s*$/.test(element.val())
       articleLine.find('input[name$="[units]"]').val('0')
       articleLine.find('input[name$="[unit_price]"]').val('')

       Print.updateArticleLinePrice(articleLine[0])

   # Deshabilita el campo documento, y solo hace calculos contemplando paginas/copias
   @map.printJobWithoutDocument ||= ->
     element = this
     elementValue = element.value || 0
     printJob = $(element).parents('.print_job:first')[0]
     jobStorage = Jobs.assignDefaultOrGetJob(printJob)
     range = printJob.querySelector('.js-page-range')
     autoDocument = printJob.querySelector('input[name$="[auto_document_name]"]')

     rangeDisabled = !element.disabled && parseInt(elementValue, 10) > 0
     range.disabled = rangeDisabled

     if autoDocument
       autoDocument.disabled = rangeDisabled

     jobStorage.rangePages = parseInt(elementValue, 10)

     Jobs.reCalcPages(printJob)

   # Actualiza el stock a imprimir
   @map.updateStock ||= ->
     element = $(this)
     printJob = element.parents('.print_job')

     Print.updateStock(printJob)

   # Actualiza el precio de linea modificada
   @map.updateLinePrice ||= ->
     $element = $(this)
     $printJob = $element.parents('.js-printable-job')

     if $printJob.length > 0
       Jobs.reCalcPages($printJob[0])
     else if $element.parents('.article_line:first').length > 0
       Print.updateArticleLinePrice($element.parents('.article_line:first')[0])

   # Pone los pagos en 0 (ya que va a cuenta corriente)
   @map.resetPayments ||= ->
     if($(this).is(':checked'))
       $('input[name^="print[payments_attributes]"]').each (i, e)->
         $(e).val('0.000') if parseInt($(e).val()) > 0
     else
       Jobs.reCalcEverything()
       Print.updateTotalPrice()

   # Muestra los detalles del documento
   @map.showDocumentDetails ||= (event, data)->
     $(this).parents('.print_job').find('.dynamic_details').hide().html(data).show()

   # Muestra el credito del cliente
   @map.showCustomerCredit ||= ->
     $("#{$(this).attr('data-target')} .modal-body").load($(this).attr('href'))

   # Quita el cliente de la impresión
   @map.clearCustomer ||= (event)->
     Print.clearCustomer()
     $(this).remove()

     event.preventDefault()
     event.stopPropagation()

   # Captura de atajos de teclado
   @map.setShortCuts ||= (e)->
     key = e.which

     # CTRL + ALT + I = Agregar un trabajo
     if (key == 73 || key == 105) && e.ctrlKey && e.altKey
       $('#add_print_job_link').click()
       e.preventDefault()
     # CTRL + ALT + A = Agregar un artículo
     else if (key == 65 || key == 97) && e.ctrlKey && e.altKey
       $('#add_article_line_link').click()
       e.preventDefault()
     # CTRL + ALT + P = Imprimir
     else if (key == 80 || key == 112) && e.ctrlKey && e.altKey
       $('#print_submit').click()
       e.preventDefault()

   @map.beforeSubmit ||= (e) ->
     # La dejamos por las dudas pero no deberíamos usarla
     e.preventDefault()

     Jobs.reCalcEverything()

     e.currentTarget.form.submit()


   $(document).on 'item.removed', @map.removeItem
   $(document).on 'autocomplete:update', 'input.autocomplete-field',
      @map.pagesAndPriceAfterAutocomplete
   $(document).on 'autocomplete:update', '#print_auto_customer_name',
     @map.autoSelectCustomerKind
   $(document).on 'change keyup', 'input[name$="[auto_customer_name]"]',
     @map.removeCustomer
   $(document).on 'change', 'input[name$="[auto_document_name]"]',
     @map.resetPrintJobElements
   $(document).on 'change', 'input[name$="[auto_article_name]"]',
     @map.resetArticlesElements
   $(document).on 'autocomplete:update', 'input[name$="[auto_article_name]"]',
     Print.updateArticlesCount
   $(document).on 'change keyup', '.js-job-pages',
     Util.debounce(@map.printJobWithoutDocument)
   $(document).on 'keyup', '.js-job-copies', @map.updateStock
   $(document).on 'change keyup ph.price_modification',
     '.price-modifier', Util.debounce(@map.updateLinePrice)
   $(document).on 'change', 'input[name$="[pay_later]"]', @map.resetPayments
   $(document).on 'ajax:success', 'a.details-link', @map.showDocumentDetails
   $(document).on 'click', '#link_to_customer_credit_detail',
     @map.showCustomerCredit
   $(document).on 'click', 'a[data-action="clear-customer"]', @map.clearCustomer
   $(document).on 'keydown', @map.setShortCuts
   #$(document).on 'click', '.js-submit-print', @map.beforeSubmit


   Jobs.loadPricesData()
   Jobs.reCalcEverything()
   Jobs.listenRangeChanges()

   if /^\s*$/.test($('#print_customer_id').val())
     $('#print_pay_later').parents('div.field').hide()

 unload: ->
   $(document).off 'item.removed', @map.removeItem
   $(document).off 'autocomplete:update', 'input.autocomplete-field',
     @map.pagesAndPriceAfterAutocomplete
   $(document).off 'autocomplete:update', '#print_auto_customer_name',
     @map.autoSelectCustomerKind
   $(document).off 'change keyup', 'input[name$="[auto_customer_name]"]',
     @map.removeCustomer
   $(document).off 'change', 'input[name$="[auto_document_name]"]', @map.resetPrintJobElements
   $(document).off 'change', 'input[name$="[auto_article_name]"]', @map.resetArticlesElements
   $(document).off 'autocomplete:update', 'input[name$="[auto_article_name]"]',
     Print.updateArticlesCount
   $(document).off 'change keyup', 'input[name$="[pages]"]', @map.printJobWithoutDocument
   $(document).off 'keyup', '.js-job-copies', @map.updateStock
   $(document).off 'change keyup', '.price-modifier', @map.updateLinePrice
   $(document).off 'change', 'input[name$="[pay_later]"]', @map.resetPayments
   $(document).off 'ajax:success', 'a.details-link', @map.showDocumentDetails
   $(document).off 'click', '#link_to_customer_credit_detail', @map.showCustomerCredit
   $(document).off 'click', 'a[data-action="clear-customer"]', @map.clearCustomer
   $(document).off 'keydown', @map.setShortCuts
